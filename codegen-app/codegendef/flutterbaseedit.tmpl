{{ define "base_edit" }}
{{- $entityName := (.Name) -}}
{{- $short := (shortname .Name ) -}}
//Auto code generated from xml definition {{timenow}}
//{{.Name}}

import 'package:ez_search_ui/modules/{{.Name}}/{{.Name}}.repo.dart';

import 'package:ez_search_ui/helper/UIhelper.dart';
import 'package:ez_search_ui/modules/{{.Name}}/{{.Name}}.model.dart';
import 'package:ez_search_ui/modules/{{.Name}}/{{.Name}}.cubit.dart';
import 'package:ez_search_ui/helpers/common_textfield.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:ez_search_ui/common/global.dart';
import 'package:ez_search_ui/constants/app_values.dart';
import 'package:flutter/services.dart';
import 'package:auto_route/auto_route.dart';
import 'package:ez_search_ui/constants/app_constant.dart';


class {{.Name}}EditPage extends StatefulWidget {
  const {{.Name}}EditPage({Key? key, required this.{{$short}}}) : super(key: key);
  final {{.ModelName}} {{$short}};

  @override
  _{{.Name}}EditPageState createState() => _{{.Name}}EditPageState();
}

class Keys {
 {{- range .Fields }} 
  static const {{.Type}} {{.Name}} = '{{.Name}}';{{end}}
  static const String submit = 'submit';
}

class _{{.Name}}EditPageState extends State<{{.Name}}EditPage> {
  late bool isWebOrDesktop;
  // ignore: prefer_final_fields

  late {{.Name}}Model {{$short}};
  final _formKey = GlobalKey<FormState>();
  final Map<String, String> _formData = <String, String>{};
  
  late Map<String, TextEditingController> ctrls;
  late Map<String, FocusNode> fNodes;
  late Map<String, String> lbls;
  late Map<String, int> maxLens;
  late double screenWidth;
  

  /// Determine to decide whether the device in landscape or in portrait.
  late bool isLandscapeInMobileView;

  @override
  void initState() {
    isWebOrDesktop = Global.isWeb || Global.isDesktop;
    {{$short}} = widget.{{$short}};
   
   
    instantiateValues();
    {{- range .Fields }}
    {{if eq .DartType "int"}}String {{.Name}} = {{$short}}.{{.Name}}.toString();{{end}}
    {{if eq .DartType "double"}}String {{.Name}} = {{$short}}.{{.Name}}.toString();{{end}}
    {{if eq .InputType "text"}}ctrls[Keys.{{.Name}}] = TextEditingController(text:{{if eq .DartType "int"}}{{.Name}}{{else}}{{if eq .DartType "double"}}{{.Name}}{{else}}{{$short}}.{{.Name}}{{end}}{{end}});
    ctrls[Keys.{{.Name}}]?.text  = {{if eq .DartType "int"}}{{.Name}}{{else}}{{if eq .DartType "double"}}{{.Name}}{{else}}{{$short}}.{{.Name}}{{end}}{{end}};
    fNodes[Keys.{{.Name}}] = FocusNode();  {{end}} {{end}}
    
    {{- range .Fields }}
    {{if .MaxCharLimit}} maxLens[Keys.{{.Name}}] = {{.MaxCharLimit}}; {{end}} {{end}}
    lbls[Keys.submit] = "Submit";

{{- range .Fields }}
     lbls[Keys.{{.Name}}] = "{{.Label}}";
    {{end}}

    initializeFormValues({{- range .Fields }} {{if eq .DartType "int"}} {{.Name}},{{else}}{{if eq .DartType "double"}} {{.Name}},{{end}}{{end}}{{end}});
    super.initState();
  }

  void initializeFormValues({{- range .Fields }} {{if eq .DartType "int"}}String {{.Name}},{{else}}{{if eq .DartType "double"}}String {{.Name}},{{end}}{{end}}{{end}}){
    {{- range .Fields }}
    _formData[Keys.{{.Name}}] = {{if eq .DartType "int"}}{{.Name}}{{else}}{{if eq .DartType "double"}}{{.Name}}{{else}}{{$short}}.{{.Name}}{{end}}{{end}};{{end}}
  }

  void instantiateValues(){
    ctrls = <String, TextEditingController>{};
    fNodes = <String, FocusNode>{};
    lbls = <String, String>{};
    maxLens = <String, int>{};
  }

  @override
  Widget build(BuildContext context) {
    screenWidth = MediaQuery.of(context).size.width;
    return Scaffold(
        body: SingleChildScrollView(
      child: Form(
        autovalidateMode: AutovalidateMode.onUserInteraction,
          key: _formKey,
          child: Column(crossAxisAlignment: CrossAxisAlignment.center,children: [
          UIHelper.buildFormHeader(
              context,
              m.id!=null ? "Edit {{$entityName}}" : "Create {{$entityName}}",
              onPressed: () => Navigator.pop(context),
            ),
          {{- range .Fields }}
          {{if eq .InputType "text"}} //{{.Label}}
            buildCommonTextField(k:Keys.{{.Name}}, textInputType:TextInputType.{{.TextInputType}}, 
            {{if eq .DartType "double"}}inputFormatters:AppValues.decimalPriceInputFormatter
            {{else}}{{if eq .DartType "int"}}inputFormatters:[FilteringTextInputFormatter.digitsOnly]{{end}}{{end}}),{{end}}
          {{if eq .InputType "dropdown"}} //{{.Label}}
                 Expanded(
                  child: CommonDropDown(k: Keys.{{.Name}},uniqueValues:state.list.map((e) => e.id).toList(),lblTxt: lbls[Keys.{{.Name}}]!, onChanged: (String? value) {
             
            },ddDataSourceNames: state.list.map((e) => e.name).toList(),
            formData: _formData,
            fNodes: fNodes
                      )),{{end}}
          {{if eq .InputType "date"}} //{{.Label}}
            Row(children: [
              Expanded(
                  child: _buildTextField(ctrls[Keys.{{.Name}}]!, lbls[Keys.{{.Name}}]!)),
              _buildDatePicker(Keys.{{.Name}}),
            ]), {{end}}
{{end}}
            BlocListener<{{.Name}}EditCubit, BaseState>(
              listener: (context, state) {
                if (state is BaseEditSuccess) {
                  {{$short}}.id = state.id;
                  Navigator.pop(context, state.id);
                } else if (state is BaseFailure) {
                  ScaffoldMessenger.of(context)
                      .showSnackBar(SnackBar(content: Text(state.errorMsg)));
                }
              },
              child: Row(
                children: [
                  BlocBuilder<{{.Name}}EditCubit, BaseState>(
                    builder: (context, state) {
                      if (state is BaseLoading) {
                        return CircularProgressIndicator();
                      }
                      return MaterialButton(
                        onPressed: () => formValidation(),
                        child: UIHelper.btnDecoration(
                              lbls[Keys.submit]!, screenWidth),
                      );
                    },
                  ),
                  MaterialButton(
                      onPressed: () => AutoRouter.of(context).pop(),
                      child: UIHelper.btnDecoration(
                          AppConstants.cancelBtn, screenWidth,
                          color: Colors.blueGrey),
                    )
                ],
              ),
            )
          ])),
    ));
  }

  Widget buildCommonTextField(
      {required String k,
      TextInputType? textInputType,
      List<TextInputFormatter>? inputFormatters}) {
    return CommonTextField(
      k: k,
      textInputType: textInputType,
      inputFormatters: inputFormatters,
      formData: _formData,
      lbls: lbls,
      ctrls: ctrls,
      reqValidate: _reqValidate,
      fNodes: fNodes,
    );
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    isLandscapeInMobileView = !isWebOrDesktop &&
        MediaQuery.of(context).orientation == Orientation.landscape;
  }
 

  Widget _buildDatePicker(String key) {
    print(
      "dt picker initial at start ${ctrls[key]!.text} dd {DateTime.parse(ctrls[key]!.text)}",
    );
    return TextButton.icon(
      onPressed: () async {
        DateTime? date = DateTime(1900);
        //print("dt picker initial val ${ctrls[key]!.text}");
        FocusScope.of(context).requestFocus(FocusNode());
        date = await showDatePicker(
            context: context,
            initialDate: _formData[key]!.isEmpty
                ? DateTime.now()
                : DateTime.parse(_formData[key]!),
            firstDate: DateTime(1900),
            lastDate: DateTime(2100));
        ctrls[key]!.text = Global.dfMMddyyyy.format(date!);
        _formData[key] = date.toString();
      },
      icon: const Icon(Icons.date_range),
      label: const Text(""),
    );
  }

  Widget _buildTextField(TextEditingController ctrl, String lblTxt) {
    return TextFormField(
      readOnly: true,
      controller: ctrl,
      decoration: InputDecoration(labelText: lblTxt),
    );
  }

  Widget _buildGenTextField(String k,
      {TextInputType textInputType = TextInputType.none,
      double? width = 200.0}) {
    return SizedBox(
      width: width,
      child: TextFormField(
        controller: ctrls[k],
        keyboardType: textInputType,
        onSaved: (newValue) => _formData[k] = newValue!,
        decoration: InputDecoration(labelText: lbls[k]),
        validator: (value) => _reqValidate(k, value),
        focusNode: fNodes[k],
      ),
    );
  }

  String? _reqValidate(String k, String? value) {
    if (value!.isEmpty) {
      fNodes[k]!.requestFocus();
      return "Please provide ${lbls[k]}.";
    }
    return null;
  }

  Widget _buildDropDown(
      String k, Iterable<String> ddDataSource, String lblTxt) {
    print("Key:$k  value: ${_formData[k]}");
    return FormField<String>(
      builder: (FormFieldState<String> state) {
        return InputDecorator(
          decoration: InputDecoration(
            labelText: lblTxt,
            // border:
            //     OutlineInputBorder(borderRadius: BorderRadius.circular(5.0))
          ),
          child: DropdownButtonHideUnderline(
            child: DropdownButton<String>(
              value: _formData[k],
              isDense: true,
              onChanged: (value) => {
                setState(() {
                  _formData[k] = value!;
                  state.didChange(value);
                })
              },
              items: ddDataSource.map((String value) {
                return DropdownMenuItem<String>(
                  value: value,
                  child: Text(
                    value,
                    overflow: TextOverflow.ellipsis,
                  ),
                );
              }).toList(),
            ),
          ),
        );
      },
    );
  }

  formValidation()  {
    if (_formKey.currentState!.validate()) {
      _formKey.currentState!.save();
      update{{ .Name}}Model();
      
      // if ({{$short}}.id.isEmpty) {
      //   //creaetd mode need
      //   {{$short}}.id = id!;
      // }
      // setState(() {});

      // if (BlocProvider.of<{{.Name}}EditCubit>(context).state
      //     is {{.Name}}EditSuccess) {
      //   // Navigator.pop(context);
      // }
    }
  }

  void update{{ .Name}}Model() {

  {{- range .Fields }} 
  widget.{{$short}}.{{.Name}} = {{if eq .DartType "String"}} 
            _formData[Keys.{{.Name}}]!;{{end}}
            
            {{if eq .DartType "int"}} 
            int.parse(_formData[Keys.{{.Name}}]!);{{end}}
            
            {{if eq .DartType "double"}} 
            double.parse(_formData[Keys.{{.Name}}]!);{{end}}
            {{end}}
    BlocProvider.of<{{.Name}}EditCubit>(context).performCreateOrUpdate{{.Name}}({{$short}});
  ///update goes here from input control to 
}

@override
  void dispose() {
    //Disposing all focus nodes
    fNodes.forEach((key, value) {
      value.dispose();
    });

    ctrls.forEach((key, value) {
      value.dispose();
    });

    super.dispose();
  }

}{{end}}